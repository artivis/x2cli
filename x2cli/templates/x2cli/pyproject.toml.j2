[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[project.optional-dependencies]
completion = ["argcomplete"]
test = ["pytest"]

[tool.setuptools]
zip-safe = false

[project]
name = "{{ project_name }}"
version = "0.0.1"
authors = [
  { name="Your Name", email="your@mail.org" }
]
maintainers = [
  { name="Your Name", email="your@mail.org" }
]
license = { text = "Apache License, Version 2.0" }
description = "My awesome command line tool."
readme = "README.md"
requires-python = ">=3.6"
classifiers = [
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
]
dependencies = [
  "packaging",
  # List your dependencies here, e.g., "pytest"
]

[project.urls]
"Homepage" = "https://github.com/{{ cli_command }}/{{ project_name }}/tree/master/{{ project_name }}"
"Repository" = "https://github.com/{{ cli_command }}/{{ project_name }}/releases"

[project.scripts]
{{ cli_command }} = "{{ project_name }}.cli:main"

[project.entry-points."{{ project_name }}.command"]
extension_points = "{{ project_name }}.command.extension_points:ExtensionPointsCommand"
extensions = "{{ project_name }}.command.extensions:ExtensionsCommand"
{%- if commands is defined %}
{% for command, verbs in commands.items() -%}
{{ command }} = '{{ cli_command }}{{ command }}.command.{{ command }}:{{ command.capitalize() }}Command'
{% endfor -%}
{%- endif %}

[project.entry-points."{{ project_name }}.extension_point"]
command = '{{ project_name }}.command:CommandExtension'
{%- if commands is defined %}
{%- for command, verbs in commands.items() %}
{%- if verbs %}
'{{ cli_command }}{{ command }}.verb' = '{{ cli_command }}{{ command }}.verb:VerbExtension'
{%- endif %}
{%- endfor %}
{% endif -%}

{% if commands is defined %}
{%- for command, verbs in commands.items() %}
{%- if verbs %}
[project.entry-points."{{ cli_command }}{{ command }}.verb"]
{%- for verb in verbs %}
{{ verb }} = '{{ cli_command }}{{ command }}.verb.{{ verb }}:{{ verb.capitalize() }}Verb'
{%- endfor %}
{%- endif %}
{% endfor %}
{%- endif %}

# Formatting tools configuration

[tool.black]
line-length = 90
skip-string-normalization = true

[tool.ruff]
line-length = 90
extend-exclude = ["__pycache__", "*.egg_info"]
lint.select = ["E", "W", "F", "C", "N", "R", "D", "I"]
# Ignore E501 because using black creates errors with this
# "D100", "D101", "D102", "D103","D104", "D105",
# Ignore D107 Missing docstring in __init__
lint.ignore = ["D107"]
# D100, D101, D102, D103: Ignore missing docstrings in tests
lint.per-file-ignores = {"tests/*" = ["D100","D101","D102","D103"]}
lint.pydocstyle.convention = "google"
format.quote-style = "preserve"

[tool.coverage]
run.branch = true
report.show_missing = true
