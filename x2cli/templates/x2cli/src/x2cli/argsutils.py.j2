"""Provides argparse utilities to retrieve config from a file or environment variables."""

import argparse
import logging
import os

import yaml
from xdg.BaseDirectory import xdg_config_home

_{{ cli_command.upper() }}_ENV_PREFIX = '{{ cli_command.upper() }}_'
_{{ cli_command.upper() }}_CONFIG_FILE_PATH = os.path.join(xdg_config_home, '{{ cli_command }}/config.yaml')

logger = logging.getLogger(__name__)


def _load_config_file():
    print(f'Looking for file: {_{{ cli_command.upper() }}_CONFIG_FILE_PATH}')
    if os.path.isfile(_{{ cli_command.upper() }}_CONFIG_FILE_PATH):
        with open(_{{ cli_command.upper() }}_CONFIG_FILE_PATH, 'r') as file:
            logger.debug(f"Loading configuration from '{_{{ cli_command.upper() }}_CONFIG_FILE_PATH}'.")
            config = yaml.safe_load(file.read())
            logger.debug(f"Loaded configuration:\n '{config}'.")
            return config
    else:
        logger.debug(f"No configuration found at '{_{{ cli_command.upper() }}_CONFIG_FILE_PATH}'.")
        return None


class env_default(argparse.Action):  # noqa N801
    """An action class that sets values from config file, env variable or argparse."""

    _file_args = _load_config_file()

    def __init__(self, dest, required=False, default=None, **kwargs):
        # Assign value from yaml config file if it exists
        default = self._file_args.get(dest, default)

        # Assign value from env var if it exists
        envvar = _{{ cli_command.upper() }}_ENV_PREFIX + dest.upper()
        default = os.getenv(envvar, default)

        if required and default:
            required = False
        super(env_default, self).__init__(
            dest=dest, default=default, required=required, **kwargs
        )

    def __call__(self, parser, namespace, values, option_string=None):  # noqa D102
        setattr(namespace, self.dest, values)


class file_env_store_true(file_env_default):  # noqa N801
    """An action class that sets booleans from config file, env variable or argparse."""

    _file_args = _load_config_file()

    def __init__(self, option_strings, dest, default=False, required=False, help=None):
        super(file_env_store_true, self).__init__(
            option_strings=option_strings,
            dest=dest,
            nargs=0,
            const=True,
            default=default,
            required=required,
            help=help,
        )

    def __call__(self, parser, namespace, values, option_string=None):  # noqa D102
        setattr(namespace, self.dest, self.const)
