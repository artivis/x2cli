# Copyright 2016-2017 Dirk Thomas
# Copyright 2017 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""The `extension` module."""

from {{ project_name }}.command import CommandExtension
from {{ project_name }}.entry_points import get_all_entry_points, get_first_line_doc


class ExtensionsCommand(CommandExtension):
    """List extensions."""

    def add_arguments(self, parser, cli_name):
        """Add arguments to the parser.

        :param argparse.ArgumentParser parser: The parser.
        :param str cli_name: The name of the CLI.
        """
        parser.add_argument(
            '-a',
            '--all',
            action='store_true',
            default=False,
            help='Also show extensions which failed to load or are '
            'incompatible. (prefixed with `- `)',
        )

    def main(self, *, parser, args):
        """Main function for the ExtensionsCommand.

        This function retrieves all entry points and
        prints their group names and entry point names.
        If the --all argument is provided,
        it also prints extensions which failed to load or are incompatible.

        :param argparse.ArgumentParser parser: The parser.
        :param argparse.Namespace args: The parsed arguments.
        """
        all_entry_points = get_all_entry_points()
        for group_name in sorted(all_entry_points.keys()):
            print(group_name)
            group = all_entry_points[group_name]
            for entry_point_name in sorted(group.keys()):
                (dist, entry_point) = group[entry_point_name]
                self.print_entry_point(args, dist, entry_point)

    def print_entry_point(self, args, dist, entry_point):
        """Print the entry point information.

        This function prints the name and first line docstring of the
        entry point. If the entry point failed to load or instantiate,
        it will be prefixed with a `-` and the reason for failure will be printed.
        Additionally, if verbose mode is enabled, more detailed information
        about the entry point will be printed.

        :param argparse.Namespace args: The parsed arguments.
        :param pkg_resources.Distribution dist: The distribution of the entry point.
        :param pkg_resources.EntryPoint entry_point: The entry point to print.
        """
        exception = None
        try:
            plugin = entry_point.load()
        except Exception as e:
            if not args.all:
                # skip entry points which failed to load
                return
            exception = e
            plugin = None
        else:
            try:
                plugin()
            except Exception as e:
                if not args.all:
                    # skip plugins which failed to be instantiated
                    return
                exception = e

        prefix = ' ' if exception is None else '-'
        print(prefix, entry_point.name + ':', get_first_line_doc(plugin))

        if args.verbose:
            print(prefix, ' ', 'module_name:', entry_point.module_name)
            if entry_point.attrs:
                print(prefix, ' ', 'attributes:', '.'.join(entry_point.attrs))
            print(prefix, ' ', 'distribution:', repr(dist))

        if exception:
            print(prefix, ' ', 'reason:', str(exception))
