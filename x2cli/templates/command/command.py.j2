# Copyright {{ year }}
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""The `{{ command }}` module."""

from {{ project_name }}.command import CommandExtension, add_subparsers_on_demand


class {{ command.capitalize() }}Command(CommandExtension):
    """Various {{ command }} related sub-commands."""

    def add_arguments(self, parser, cli_name):
        """Adds '{{ command }}' arguments and sub-commands to the given parser.

        Args:
            parser: The parser to which arguments and sub-commands will be added.
            cli_name: The name of the CLI command being processed.

        Returns:
            None
        """
        self._subparser = parser
        # add arguments and sub-commands of verbs
        add_subparsers_on_demand(parser, cli_name, '_verb', '{{ cli_command }}{{ command }}.verb', required=False)

    def main(self, *, parser, args):
        """Executes the {{ command }} command.

        Args:
            parser: The parser used to parse the command-line arguments.
            args: The parsed command-line arguments.

        Returns:
            An integer representing the exit status of the command.
        """
        if not hasattr(args, '_verb'):
            # in case no verb was passed
            self._subparser.print_help()
            return 0

        extension = getattr(args, '_verb')

        # call the verb's main method
        return extension.main(args=args)
